import streamlit as st
import pandas as pd
import plotly.express as px
import gdown
from sklearn.linear_model import Ridge, LinearRegression
from joblib import Parallel, delayed
import numpy as np

# Set Page Layout
st.set_page_config(page_title="Google Play Store Insights", layout="wide")

# Load Data
@st.cache_data
def load_data():
    url = "https://drive.google.com/uc?id=1b_82z_XOBOIT4LtuSrJKjZhdOw3YpubN"
    output = "data.parquet"
    
    # Download the file using gdown
    gdown.download(url, output, quiet=False)

    # Read the Parquet file
    return pd.read_parquet(output)

data = load_data()

### --- Helper Functions ---

# Forecasting function for a single geo-region
def forecast_region(region, data, start_year=2021, future_years=5):
    region_data = data[data['geo_region'] == region]
    years = np.arange(2013, start_year + 1).reshape(-1, 1)
    revenue = region_data[[f'{year}_users' for year in range(2013, start_year + 1)]].sum().values

    model = Ridge(alpha=0.5)  # Ridge for faster and stable regression
    model.fit(years, revenue)

    future_years_range = np.arange(start_year + 1, start_year + future_years + 1).reshape(-1, 1)
    future_revenue = model.predict(future_years_range)

    return pd.DataFrame({
        'Year': future_years_range.flatten(),
        'Projected Revenue': future_revenue,
        'Geo-Region': region
    })

# Parallelized forecasting across geo-regions
def forecast_revenue_by_region(data, start_year=2021, future_years=5):
    geo_regions = data['geo_region'].unique()
    forecasts = Parallel(n_jobs=-1)(
        delayed(forecast_region)(region, data, start_year, future_years) for region in geo_regions
    )
    return pd.concat(forecasts, ignore_index=True)


# Processed Data
future_revenue_by_region = forecast_revenue_by_region(data)

# Calculate Average Revenue per User (ARPU)
def calculate_arpu(data):
    total_revenue = data['Revenue'].sum()
    total_users = data['Installs'].sum()
    return total_revenue / total_users if total_users > 0 else 0

# Calculate Install-to-Revenue Conversion Rate
def calculate_conversion_rate(data):
    paid_installs = data[data['Price'] > 0]['Installs'].sum()
    total_installs = data['Installs'].sum()
    return (paid_installs / total_installs) * 100 if total_installs > 0 else 0

### --- Dashboard Layout ---

st.title("üìä Google Play Store Business Insights Dashboard")

# Section 1: App Performance Metrics
st.header("üìà App Performance Metrics")
# Row 1: Core Metrics
col1, col2, col3 = st.columns(3)

col1.metric(
    "Total Revenue",
    f"${data['Revenue'].sum():,.2f}",
    help="The total earnings generated by all apps."
)

col2.metric(
    "Total Installs",
    f"{data['Installs'].sum():,}",
    help="The total number of times apps have been downloaded."
)

col3.metric(
    "Average App Rating",
    f"{data['Rating'].mean():.2f}",
    help="The average customer rating across all apps."
)

# Row 2: Additional Metrics (ARPU & Conversion Rate)
col4, col5 = st.columns(2)

col4.metric(
    "Average Revenue per User (ARPU)",
    f"${calculate_arpu(data):,.4f}",
    help="The average revenue earned from each user."
)

col5.metric(
    "Install-to-Revenue Conversion Rate",
    f"{calculate_conversion_rate(data):.4f}%",
    help="The percentage of installs that generate revenue."
)

# Free & Paid Apps Insights (Two-Column Layout)
col1, col2 = st.columns(2)

# Top 5 Free Apps by Installs
top_5_free_apps = data[data['Price'] == 0].nlargest(5, 'Installs')[['App Name', 'Installs']]
fig_top_5_free = px.bar(
    top_5_free_apps,
    x='Installs',
    y='App Name',
    orientation='h',
    title="Top 5 Free Apps by Installs",
    labels={'App Name': 'App', 'Installs': 'Installs'}
)
col1.plotly_chart(fig_top_5_free, use_container_width=True)

# Top 5 Paid Apps by Installs
top_5_paid_apps = data[data['Price'] > 0].nlargest(5, 'Installs')[['App Name', 'Installs']]
fig_top_5_paid = px.bar(
    top_5_paid_apps,
    x='Installs',
    y='App Name',
    orientation='h',
    title="Top 5 Paid Apps by Installs",
    labels={'App Name': 'App', 'Installs': 'Installs'}
)
col2.plotly_chart(fig_top_5_paid, use_container_width=True)

# Category & Developer Insights (Two-Column Layout)
col1, col2 = st.columns(2)

# Category Revenue Share (Top 10)
top_10_categories = data.groupby('Category')['Revenue'].sum().nlargest(10).reset_index()
fig_category = px.bar(
    top_10_categories,
    x='Revenue',
    y='Category',
    orientation='h',
    title="Top 10 Categories by Revenue",
    labels={'Revenue': 'Revenue', 'Category': 'Category'}
)
fig_category.update_layout(yaxis=dict(categoryorder='total ascending'))
col1.plotly_chart(fig_category, use_container_width=True)

# Top Developers by Revenue (Top 10)
top_10_developers = data.groupby('Developer Id')['Revenue'].sum().nlargest(10).reset_index()
fig_developers = px.bar(
    top_10_developers,
    x='Revenue',
    y='Developer Id',
    orientation='h',
    title="Top 10 Developers by Revenue",
    labels={'Revenue': 'Revenue', 'Developer Id': 'Developer'}
)
fig_developers.update_layout(yaxis=dict(categoryorder='total ascending'))
col2.plotly_chart(fig_developers, use_container_width=True)

# Geo-Regional Insights (Two-Column Layout)
col1, col2 = st.columns(2)

# Economic Zone Revenue Share (Bar Chart)
zone_revenue = data.groupby('economic_zone')['Revenue'].sum().reset_index()
fig_zone = px.bar(
    zone_revenue,
    x='Revenue',
    y='economic_zone',
    orientation='h',
    title="Economic Zone Revenue Share",
    labels={'Revenue': 'Revenue', 'economic_zone': 'Economic Zone'}
)
col1.plotly_chart(fig_zone, use_container_width=True)

# Market Share by Geo-Region (Logarithmic Scale for Small Values)
geo_revenue = data.groupby('geo_region')['Revenue'].sum().reset_index().sort_values(by='Revenue', ascending=False)
fig_geo = px.bar(
    geo_revenue,
    x='Revenue',
    y='geo_region',
    orientation='h',
    title="Market Share by Geo-Region",
    labels={'Revenue': 'Revenue', 'geo_region': 'Geo-Region'},
    log_x=True  # Log scale to highlight smaller values
)
col2.plotly_chart(fig_geo, use_container_width=True)

# Section 2: Predictive Analytics
st.header("üîÆ Predictive Analytics")

# Forecasted Revenue Growth by Geo-Region
fig_forecast_region = px.line(
    future_revenue_by_region,
    x="Year",
    y="Projected Revenue",
    color="Geo-Region",
    markers=True,
    title="Forecasted Revenue Growth by Geo-Region (2022-2026)",
    labels={"Year": "Year", "Projected Revenue": "Projected Revenue"},
)
fig_forecast_region.update_xaxes(tickmode='linear', dtick=1)
st.plotly_chart(fig_forecast_region, use_container_width=True)

# Footer
st.markdown("---")
st.markdown("¬© 2025 Google Play Store Insights | Built with ‚ù§Ô∏è by Team G8")